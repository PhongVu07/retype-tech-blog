[[{"l":"This is another Tech blog","p":["My name is Phong, a developer, who lives somewhere on earth. I create this site to save my learning progress.","There will be mostly about Web Development, Solana Development and Coding With Rust in here for now."]},{"l":"Content","p":["Solana Development"]}],[{"l":"Solana Development","p":["These are main structure of Solana development:"]},{"l":"I. Client","p":["Client is where users interact with Solana features, it can be written in anything: Javascript, Python, C++, etc"]},{"l":"II. JSON RPC","p":["This is how Client interact with the blockchain, we can understand them as APIs"]},{"l":"III. Solana Program","p":["Solana program is Rust Code that deploy to the blockchain, to create methods to modify the state of the blockchain (This is smart contract in other blockchain)"]},{"l":"IV. Account","p":["Account is where the state of the blockchain is stored."]}],[{"l":"Account"}],[{"i":"program-dereived-addresses-pda-and-cross-program-invocation-cpi","l":"Program Dereived Addresses (PDA) and Cross Program Invocation (CPI)","p":["First answer the question: How Solana implement Composability? or How programs in Solana call each other?. The answer is CPI"]},{"i":"cross-program-invocation-cpi","l":"Cross Program Invocation (CPI)","p":["Basicaly we can dupplicate any program, deploy to blockchain and use that, but there are programs that are already running and we want to perform action on that program (Eg: the Token Program)","For example, we have a Counter Program, then we create an Authorize Program. When users want to increase the number, they have to be authorized. The user in this case is CPI"]},{"i":"program-dereived-addresses-pda","l":"Program Dereived Addresses (PDA)","p":["From the counter programs example above, the Auth Program needs to create instructions to the Counter Program, which means users need to sign, but there's no keypair on the blockchain (for obvious reason). This is where PDA come in to place.","PDA and CPI is sticked together.","Have 2 major benefits:","Allows programs to sign other programs","Hashmap interface to AccountData that allocate to a Pubkey"]}],[{"l":"Transaction","p":["An instructions includes:","a proram ID: Pubkey","accounts: Vec","data: &[u8]","A transaction is a list of instrucitons or signatures, it is send to blockchain get execute one by one, if one of them fails, the transaction fails","AccountMeta:","key: Pubkey","is_signer: bool (if true, the transaction is a list of signatures)","is_writeable: bool"]}],[{"l":"Token Program","p":["In the base level, there are only 2 mains concept which we need to pay attention to: Mint and TokenAccount"]},{"i":"mint-token-type-eg-usdc-sol-btc","l":"Mint (token type): eg: USDC, SOL, BTC","p":["authority: PK, who can mint more tokens","supply: u64, total ciruclation"]},{"i":"tokenaccount-user-metadata-refers-to-the-amount-of-paticular-mint-that-user-has-access-to","l":"TokenAccount: user metadata, refers to the amount of paticular mint that user has access to.","p":["amount: u64, amount user has","owner: PK, needs to sign for amount changes","mint: PK","When working with tokens, there a few operations we need to support:"]},{"l":"Transfer"},{"l":"Burn"},{"l":"Mint"}]]